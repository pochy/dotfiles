# tmux起動時のシェルをzshにする
set-option -g default-shell /usr/bin/zsh

# tmuxを256色表示できるようにする
#set-option -g default-terminal screen-256color
#set -g terminal-overrides 'xterm:colors=256'

# ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on

## Escキーの遅延を解消
set -s escape-time 0

# prefixキーをC-qに変更
set -g prefix C-a

# C-bのキーバインドを解除
unbind C-b

# ステータスバーをトップに配置する
#set-option -g status-position top

# prefix + rで設定ファイルをリロードする。.tmux.conf を変更したらリロード！
bind r source-file ~/.tmux.conf \; display "Reloaded!"

set -g status-interval 1
set -g status-left-length 50
#set -g status-right-length 50
## status-right の最大の長さを指定する。
set-option -g status-right-length 50

set -g status-bg black
set -g status-fg white
set -g status-left '#[fg=cyan,bold][#H #S]#[default]'

#set-option -g status-left ' \
##[fg=cyan]#{?client_prefix,#[reverse],} #H   \
##[fg=green]Session: #S \
##[fg=yellow]Window: #I \
##[fg=cyan]Pane: #P \
##[bg=colour054,fg=colour255] #{=21:pane_title} \
#'
set -g status-right '#[fg=blue,bold][%Y-%m-%d (%a) %H:%M:%S]#[default]'
set-option -g message-style bg=red,fg=white
set-option -g status-style bg=black,fg=yellow,dim

set-option -g pane-border-style fg=black
set-option -g pane-active-border-style fg=brightgreen

# prefixを押したときに、押されていることがわかるようにwindow-status-current-formatを次のように変更します。
setw -g window-status-current-format '#[bg=colour2,fg=colour255]#{?client_prefix,#[bg=colour3],} #I #W '
set-window-option -g window-status-current-style bg=blue,dim
setw -g window-status-format '#[fg=colour242] #I #W '
set-window-option -g window-status-style fg=blue,bg=black,dim,fg=brightblue

# vimのキーバインドでペインを移動する
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5


# 画面分割や新しいタブで新しいpaneを作った際に、その新しいシェルのカレントディレクトリは、命令を出したディレクトリではなくホームディレクトリになったしまう。
# カレントディレクトリに変更
bind c new-window -c "#{pane_current_path}"

# | でペインを縦分割する
bind | split-window -h -c "#{pane_current_path}"

# - でペインを縦分割する
bind - split-window -v -c "#{pane_current_path}"

# 番号基準値を変更
set-option -g base-index 1

# マウス操作を有効にする
set-option -g mouse on
set -g mouse on

bind -n WheelUpPane   select-pane -t= \; copy-mode -e \; send-keys -M
bind -n WheelDownPane select-pane -t= \;                 send-keys -M
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'
#bind-key -T edit-mode-vi WheelUpPane send-keys -X scroll-up
#bind-key -T edit-mode-vi WheelDownPane send-keys -X scroll-down
#bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# コピーモードを設定する
# コピーモードでvimキーバインドを使う
set-window-option -g mode-keys vi
setw -g mode-keys vi

## ☆クリップボートとの連携（Mac）
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"

# 'v' で選択を始める
bind -T copy-mode-vi v send -X begin-selection

# 'V' で行選択
bind -T copy-mode-vi V send -X select-line

# 'C-v' で矩形選択
bind -T copy-mode-vi C-v send -X rectangle-toggle

# 'y' でヤンク
bind -T copy-mode-vi y send -X copy-selection

# 'Y' で行ヤンク
bind -T copy-mode-vi Y send -X copy-line

# 'C-p'でペースト
bind-key C-S-p paste-buffer
